trigger: none
pool:
  vmImage: ubuntu-latest

parameters:
  - name: actionToPerform
    displayName: Action to perform
    default: Deploy
    values:
      - Deploy
      - Destroy
  - name: nodePoolSize
    displayName: Node Pool Size
    type: string
    default: Standard_DS2_v2
    values:
      - Standard_DS2_v2
      - Standard_D2s_v3
      - Standard_D3_v2
  - name: aksName
    displayName: AKS cluster name
    type: string
    default: akseastus01

variables:
  RGNAME: 'rgeastus01'
  SANAME: 'sceastus01'
  BLOBCONTAINERNAME: 'blobeastus01'

stages:
  - stage: Validate
    condition: eq('${{ parameters.actionToPerform }}', 'Deploy')
    jobs:
      - job: Validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - bash: terraform --version
            displayName: Terraform Version
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: $(RGNAME)
              backendAzureRmStorageAccountName: $(SANAME)
              backendAzureRmContainerName: $(BLOBCONTAINERNAME)
              backendAzureRmKey: 'demo.terraform.tfstate'
          - task: TerraformTaskV2@2
            displayName: 'terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
  - stage: Deploy
    condition: eq('${{ parameters.actionToPerform }}', 'Deploy')
    dependsOn: Validate
    jobs:
      - job: Deploy
        continueOnError: false
        steps:
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: $(RGNAME)
              backendAzureRmStorageAccountName: $(SANAME)
              backendAzureRmContainerName: $(BLOBCONTAINERNAME)
              backendAzureRmKey: 'demo.terraform.tfstate'
          - bash: ls -lah
            displayName: test
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
          - task: TerraformTaskV2@2
            displayName: 'terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out aks.tfplan -input=false -var "node_pool_size=${{ parameters.nodePoolSize }}" -var "aks_name=${{ parameters.aksName }}"'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              environmentServiceNameAzureRM: 'spHansRMConnection'
          - task: TerraformTaskV2@2
            displayName: 'terraform apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve aks.tfplan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              environmentServiceNameAzureRM: 'spHansRMConnection'
          - task: PublishPipelineArtifact@1
            displayName: 'save terraform plan'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform/azure/aks.tfplan'
              artifact: 'tfplan-aks'
              publishLocation: 'pipeline'
  - stage: Destroy
    condition: eq('${{ parameters.actionToPerform }}', 'Destroy')
    jobs:
      - job: Destroy
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - bash: terraform --version
            displayName: Terraform Version
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: $(RGNAME)
              backendAzureRmStorageAccountName: $(SANAME)
              backendAzureRmContainerName: $(BLOBCONTAINERNAME)
              backendAzureRmKey: 'demo.terraform.tfstate'
          - task: TerraformTaskV2@2
            displayName: Terraform Plan -Destroy
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              commandOptions: '-destroy -out aks.destroy.tfplan -input=false -var "node_pool_size=${{ parameters.nodePoolSize }}" -var "aks_name=${{ parameters.aksName }}"'
              environmentServiceNameAzureRM: 'spHansRMConnection'
          - task: TerraformTaskV2@2
            displayName: Terraform Apply -Destroy
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              commandOptions: '-destroy -auto-approve aks.destroy.tfplan'
              environmentServiceNameAzureRM: 'spHansRMConnection'