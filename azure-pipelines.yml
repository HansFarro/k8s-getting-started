trigger:
  - develop
pool:
  vmImage: ubuntu-latest

parameters:
  - name: actionToPerform
    default: Deploy
    values:
      - Deploy
      - Destroy

stages:
  - stage: Validate
    condition: and(eq('${{ parameters.actionToPerform }}', 'Deploy'),eq(variables.isMain, true))
    jobs:
      - job: Validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - bash: terraform --version
            displayName: Terraform Version
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: 'RG-hansf'
              backendAzureRmStorageAccountName: 'hansterraformstate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'demo.terraform.tfstate'
          - task: TerraformTaskV2@2
            displayName: 'terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
  - stage: Deploy
    condition: and(eq('${{ parameters.actionToPerform }}', 'Deploy'),eq(variables.isMain, true))
    dependsOn: Validate
    jobs:
      - job: Deploy
        continueOnError: false
        steps:
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: 'RG-hansf'
              backendAzureRmStorageAccountName: 'hansterraformstate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'demo.terraform.tfstate'
          - bash: ls -lah
            displayName: test
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
          - task: TerraformTaskV2@2
            displayName: 'terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out aks.tfplan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              environmentServiceNameAzureRM: 'spHansRMConnection'
          - task: TerraformTaskV2@2
            displayName: 'terraform apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-auto-approve aks.tfplan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              environmentServiceNameAzureRM: 'spHansRMConnection'
          - task: PublishPipelineArtifact@1
            displayName: 'save terraform plan'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/terraform/azure/aks.tfplan'
              artifact: 'tfplan-aks'
              publishLocation: 'pipeline'
  - stage: Destroy
    condition: and(eq('${{ parameters.actionToPerform }}', 'Destroy'),eq(variables.isMain, true))
    jobs:
      - job: Destroy
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
          - bash: terraform --version
            displayName: Terraform Version
          - task: TerraformTaskV2@2
            displayName: 'terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'
              backendServiceArm: 'spHansRMConnection'
              backendAzureRmResourceGroupName: 'RG-hansf'
              backendAzureRmStorageAccountName: 'hansterraformstate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'demo.terraform.tfstate'
          - task: TerraformTaskV2@2
            displayName: 'terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/azure'